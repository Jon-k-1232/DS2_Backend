name: Build and Deploy Docker Images

on:
   push:
      branches:
         - master

jobs:
   build:
      runs-on: ubuntu-latest

      env:
         DOCKER_USERNAME: marine1232
         APP_NAME: ds2-backend # Ensure this is lowercase

      steps:
         - name: Checkout code
           uses: actions/checkout@v2
           with:
              token: ${{ secrets.PAT_TOKEN }}

         - name: Get current version
           id: get_version
           run: |
              current_version=$(cat version.txt)
              echo "Current version: $current_version"
              echo "::set-output name=current_version::$current_version"

         - name: Check for existing tag
           id: check_tag
           run: |
              current_version="${{ steps.get_version.outputs.current_version }}"
              TAG_EXISTS=$(git tag --list "v$current_version" | wc -l)
              echo "Checking tag for version: v$current_version"
              if [ "$TAG_EXISTS" -ne 0 ]; then
                echo "Tag v$current_version already exists. Please manually update the version file."
                exit 1
              fi
              echo "Tag does not exist. Proceeding with build."
              echo "::set-output name=tag_exists::$TAG_EXISTS"

         - name: Display versions for debugging
           run: |
              echo "Current version: ${{ steps.get_version.outputs.current_version }}"
              echo "Tag exists: ${{ steps.check_tag.outputs.tag_exists }}"

         - name: Configure Git user
           run: |
              git config --global user.name 'github-actions[bot]'
              git config --global user.email 'github-actions[bot]@users.noreply.github.com'

         - name: Create and push tag
           run: |
              new_version="${{ steps.get_version.outputs.current_version }}"
              echo "Creating and pushing tag: v$new_version"
              git tag -a "v$new_version" -m "Release version $new_version"
              git push origin "v$new_version"
           env:
              GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v1

         - name: Login to Docker Hub
           uses: docker/login-action@v2
           with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

         - name: Set environment variables for backend
           run: |
              echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
              echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
              echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
              echo "API_TOKEN=${{ secrets.API_TOKEN }}" >> .env
              echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env
              echo "NODE_PORT_PROD=${{ secrets.NODE_PORT_PROD }}" >> .env
              echo "DB_PROD_HOST=${{ secrets.DB_PROD_HOST }}" >> .env
              echo "FRONT_END_URL_PROD=${{ secrets.FRONT_END_URL_PROD }}" >> .env
              echo "PRODUCTION_PDF_SAVE_LOCATION=${{ secrets.PRODUCTION_PDF_SAVE_LOCATION }}" >> .env
              echo "HOST_IP_PROD=${{ secrets.HOST_IP_PROD }}" >> .env
              echo "FILE_SHARE_PATH=${{ secrets.FILE_SHARE_PATH }}" >> .env
              echo "TIMESHEETS_PENDING_DIR=${{ secrets.TIMESHEETS_PENDING_DIR }}" >> .env
              echo "TIMESHEETS_PROCESSING_DIR=${{ secrets.TIMESHEETS_PROCESSING_DIR }}" >> .env
              echo "TIMESHEETS_PROCESSED_DIR=${{ secrets.TIMESHEETS_PROCESSED_DIR }}" >> .env
              echo "TIMESHEETS_ERROR_DIR=${{ secrets.TIMESHEETS_ERROR_DIR }}" >> .env
              echo "USER_VERSION_TIMESHEETS_ERROR_DIR=${{ secrets.USER_VERSION_TIMESHEETS_ERROR_DIR }}" >> .env
              echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
              echo "FILE_SHARE_USERNAME=${{ secrets.FILE_SHARE_USERNAME }}" >> .env
              echo "FILE_SHARE_PASSWORD=${{ secrets.FILE_SHARE_PASSWORD }}" >> .env
              echo "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" >> .env
              echo "FROM_EMAIL_PASSWORD=${{ secrets.FROM_EMAIL_PASSWORD }}" >> .env
              echo "FROM_EMAIL_SMTP=${{ secrets.FROM_EMAIL_SMTP }}" >> .env
              echo "SEND_TO_EMAILS=${{ secrets.SEND_TO_EMAILS }}" >> .env
              echo "DS2_SUPPORT_EMAILS=${{ secrets.DS2_SUPPORT_EMAILS }}" >> .env
              echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
              echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
              echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> .env
              echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> .env
              echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env

         - name: Build and push Docker images for backend
           run: |
              docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest .
              docker tag ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.get_version.outputs.current_version }}
              docker push ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
              docker push ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ steps.get_version.outputs.current_version }}

   deploy:
      needs: build
      runs-on: self-hosted

      env:
         DOCKER_USERNAME: marine1232
         APP_NAME: ds2-backend

      steps:
         - name: Checkout code
           uses: actions/checkout@v2

         - name: Set PATH for Docker
           run: echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV

         - name: Print PATH
           run: echo $PATH

         - name: Create .env file for backend
           run: |
              echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
              echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
              echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
              echo "API_TOKEN=${{ secrets.API_TOKEN }}" >> .env
              echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env
              echo "NODE_PORT_PROD=${{ secrets.NODE_PORT_PROD }}" >> .env
              echo "DB_PROD_HOST=${{ secrets.DB_PROD_HOST }}" >> .env
              echo "FRONT_END_URL_PROD=${{ secrets.FRONT_END_URL_PROD }}" >> .env
              echo "PRODUCTION_PDF_SAVE_LOCATION=${{ secrets.PRODUCTION_PDF_SAVE_LOCATION }}" >> .env
              echo "HOST_IP_PROD=${{ secrets.HOST_IP_PROD }}" >> .env
              echo "FILE_SHARE_PATH=${{ secrets.FILE_SHARE_PATH }}" >> .env
              echo "LOCAL_FILE_SHARE_PATH=${{ secrets.LOCAL_FILE_SHARE_PATH }}" >> .env
              echo "DOCKER_FILE_SHARE_PATH=${{ secrets.DOCKER_FILE_SHARE_PATH }}" >> .env
              echo "TIMESHEETS_PENDING_DIR=${{ secrets.TIMESHEETS_PENDING_DIR }}" >> .env
              echo "TIMESHEETS_PROCESSING_DIR=${{ secrets.TIMESHEETS_PROCESSING_DIR }}" >> .env
              echo "TIMESHEETS_PROCESSED_DIR=${{ secrets.TIMESHEETS_PROCESSED_DIR }}" >> .env
              echo "TIMESHEETS_ERROR_DIR=${{ secrets.TIMESHEETS_ERROR_DIR }}" >> .env
              echo "USER_VERSION_TIMESHEETS_ERROR_DIR=${{ secrets.USER_VERSION_TIMESHEETS_ERROR_DIR }}" >> .env
              echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
              echo "FILE_SHARE_USERNAME=${{ secrets.FILE_SHARE_USERNAME }}" >> .env
              echo "FILE_SHARE_PASSWORD=${{ secrets.FILE_SHARE_PASSWORD }}" >> .env
              echo "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" >> .env
              echo "FROM_EMAIL_USERNAME=${{ secrets.FROM_EMAIL_USERNAME }}" >> .env
              echo "FROM_EMAIL_PASSWORD=${{ secrets.FROM_EMAIL_PASSWORD }}" >> .env
              echo "FROM_EMAIL_SMTP=${{ secrets.FROM_EMAIL_SMTP }}" >> .env
              echo "SEND_TO_EMAILS=${{ secrets.SEND_TO_EMAILS }}" >> .env
              echo "DS2_SUPPORT_EMAILS=${{ secrets.DS2_SUPPORT_EMAILS }}" >> .env
              echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
              echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
              echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> .env
              echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> .env
              echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env

         - name: Debug .env file for backend
           run: cat .env

         - name: Login to Docker Hub
           run: |
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

         - name: Pull latest Docker image for backend
           run: |
              docker pull ${{ env.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest

         - name: Run Docker Compose
           run: |
              docker compose -f docker-compose.backend.yml down
              docker compose -f docker-compose.backend.yml up -d
